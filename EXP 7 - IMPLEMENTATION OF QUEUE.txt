Program:(a)
#include <stdio.h>
#define MAX 5

int Queue[MAX], front = -1, rear = -1;

int IsFull();
int IsEmpty();
void Enqueue(int ele);
void Dequeue();
void Display();

int main() {
    int ch, e;
    do {
        printf("1.ENQUEUE 2.DEQUEUE 3.DISPLAY 4.EXIT\n");
        printf("Enter your choice: ");
        scanf("%d", &ch);
        switch (ch) {
            case 1:
                printf("Enter the element: ");
                scanf("%d", &e);
                Enqueue(e);
                break;
            case 2:
                Dequeue();
                break;
            case 3:
                Display();
                break;
        }
    } while (ch <= 3);
    return 0;
}

int IsFull() {
    return rear == MAX - 1;
}

int IsEmpty() {
    return front == -1;
}

void Enqueue(int ele) {
    if (IsFull()) {
        printf("Queue is Overflow...!\n");
    } else {
        if (front == -1) {
            front = 0;
        }
        rear = rear + 1;
        Queue[rear] = ele;
    }
}

void Dequeue() {
    if (IsEmpty()) {
        printf("Queue is Underflow...!\n");
    } else {
        printf("Dequeued element: %d\n", Queue[front]);
        if (front == rear) {
            front = rear = -1; // Reset the queue if it's empty after dequeue
        } else {
            front = front + 1;
        }
    }
}

void Display() {
    int i;
    if (IsEmpty()) {
        printf("Queue is Underflow...!\n");
    } else {
        for (i = front; i <= rear; i++) {
            printf("%d\t", Queue[i]);
        }
        printf("\n");
    }
}




Output :
1.ENQUEUE 2.DEQUEUE 3.DISPLAY 4.EXIT
Enter your choice : 1
Enter the element : 10
1.ENQUEUE 2.DEQUEUE 3.DISPLAY 4.EXIT
Enter your choice : 1
Enter the element : 20
1.ENQUEUE 2.DEQUEUE 3.DISPLAY 4.EXIT
Enter your choice : 1
Enter the element : 30
1.ENQUEUE 2.DEQUEUE 3.DISPLAY 4.EXIT
Enter your choice : 1
Enter the element : 40
1.ENQUEUE 2.DEQUEUE 3.DISPLAY 4.EXIT
Enter your choice : 1
Enter the element : 50
1.ENQUEUE 2.DEQUEUE 3.DISPLAY 4.EXIT
Enter your choice : 1
Enter the element : 60
Queue is Overflow...!
1.ENQUEUE 2.DEQUEUE 3.DISPLAY 4.EXIT
Enter your choice : 3
10 20 30 40 50
1.ENQUEUE 2.DEQUEUE 3.DISPLAY 4.EXIT
Enter your choice : 2
10
1.ENQUEUE 2.DEQUEUE 3.DISPLAY 4.EXIT
Enter your choice : 2
20
1.ENQUEUE 2.DEQUEUE 3.DISPLAY 4.EXIT
Enter your choice : 2
30
1.ENQUEUE 2.DEQUEUE 3.DISPLAY 4.EXIT
Enter your choice : 2
40
1.ENQUEUE 2.DEQUEUE 3.DISPLAY 4.EXIT
Enter your choice : 2
50
1.ENQUEUE 2.DEQUEUE 3.DISPLAY 4.EXIT
Enter your choice : 2
Queue is Underflow...!
1.ENQUEUE 2.DEQUEUE 3.DISPLAY 4.EXIT
Enter your choice : 3
Queue Underflow...!
1.ENQUEUE 2.DEQUEUE 3.DISPLAY 4.EXIT
Enter your choice : 4


Program :
#include <stdio.h>
#include <stdlib.h>

// Define the node structure
struct node {
    int Element;
    struct node *Next;
} *Front = NULL, *Rear = NULL;

typedef struct node Queue;

// Function prototypes
int IsEmpty(Queue *List);
void Enqueue(int e);
void Dequeue();
void Display();

int main() {
    int ch, e;
    do {
        printf("1.ENQUEUE 2.DEQUEUE 3.DISPLAY 4.EXIT");
        printf("\nEnter your choice: ");
        scanf("%d", &ch);
        switch (ch) {
            case 1:
                printf("Enter the element: ");
                scanf("%d", &e);
                Enqueue(e);
                break;
            case 2:
                Dequeue();
                break;
            case 3:
                Display();
                break;
        }
    } while (ch <= 3);
    return 0;
}

// Check if the queue is empty
int IsEmpty(Queue *List) {
    return List == NULL;
}

// Enqueue function to add an element to the queue
void Enqueue(int e) {
    Queue *NewNode = malloc(sizeof(Queue));
    if (NewNode == NULL) {
        printf("Memory allocation failed\n");
        return;
    }
    NewNode->Element = e;
    NewNode->Next = NULL;
    if (Rear == NULL) {
        Front = Rear = NewNode;
    } else {
        Rear->Next = NewNode;
        Rear = NewNode;
    }
}

// Dequeue function to remove an element from the queue
void Dequeue() {
    if (IsEmpty(Front)) {
        printf("Queue is Underflow...!\n");
    } else {
        Queue *TempNode = Front;
        Front = Front->Next;
        if (Front == NULL) {
            Rear = NULL;
        }
        printf("Dequeued element: %d\n", TempNode->Element);
        free(TempNode);
    }
}

// Display function to print all elements in the queue
void Display() {
    if (IsEmpty(Front)) {
        printf("Queue is Underflow...!\n");
    } else {
        Queue *Position = Front;
        while (Position != NULL) {
            printf("%d\t", Position->Element);
            Position = Position->Next;
        }
        printf("\n");
    }
}




Output :
1.ENQUEUE 2.DEQUEUE 3.DISPLAY 4.EXIT
Enter your choice : 1
Enter the element : 10
1.ENQUEUE 2.DEQUEUE 3.DISPLAY 4.EXIT
Enter your choice : 1
Enter the element : 20
1.ENQUEUE 2.DEQUEUE 3.DISPLAY 4.EXIT
Enter your choice : 1
Enter the element : 30
1.ENQUEUE 2.DEQUEUE 3.DISPLAY 4.EXIT
Enter your choice : 1
Enter the element : 40
1.ENQUEUE 2.DEQUEUE 3.DISPLAY 4.EXIT
Enter your choice : 1
Enter the element : 50
1.ENQUEUE 2.DEQUEUE 3.DISPLAY 4.EXIT
Enter your choice : 3
10 20 30 40 50
1.ENQUEUE 2.DEQUEUE 3.DISPLAY 4.EXIT
Enter your choice : 2
10
1.ENQUEUE 2.DEQUEUE 3.DISPLAY 4.EXIT
Enter your choice : 2
20
1.ENQUEUE 2.DEQUEUE 3.DISPLAY 4.EXIT
Enter your choice : 2
30
1.ENQUEUE 2.DEQUEUE 3.DISPLAY 4.EXIT
Enter your choice : 2
40
1.ENQUEUE 2.DEQUEUE 3.DISPLAY 4.EXIT
Enter your choice : 2
50
1.ENQUEUE 2.DEQUEUE 3.DISPLAY 4.EXIT
Enter your choice : 2
Queue is Underflow...!
1.ENQUEUE 2.DEQUEUE 3.DISPLAY 4.EXIT
Enter your choice : 4